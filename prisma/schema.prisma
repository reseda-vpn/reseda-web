// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Lead {
  email     String   @unique
  id        String   @id @default(uuid())
  signupAt  DateTime @default(now()) @updatedAt
  claimable Boolean  @default(false)
  claimed   Boolean  @default(false)
}

model Usage {
  id        String   @id
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId    String
  connEnd   DateTime @default(now())
  up        String
  down      String
  serverId  String
  server    Server   @relation(fields: [serverId], references: [id], onDelete: NoAction)
  connStart DateTime
}

model Server {
  id                String   @unique @db.VarChar(255)
  serverUp          DateTime @default(now())
  location          String
  country           String
  virtual           Boolean  @default(false)
  hostname          String   @unique
  flag              String
  connectionHistory Usage[]
}

model Account {
  id                       String   @id @default(cuid())
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.VarChar(500)
  access_token             String?  @db.VarChar(500)
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  billing_id               String   @default("")
  lcs                      String?
  limit                    String?  @default("-1")
  tier                     String   @default("FREE")
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId       String?
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String?   @default("user")
  accounts      Account[]
  sessions      Session[]
  usages        Usage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
